#!/bin/bash
# This is a simple terminal alarm clock

help_message() {
  echo "usage: $(basename $0) [OPTIONS] secondsToAlarm [OPTIONS]"
  echo "       Arguments to long options are also requried for short options."
  echo ""
  echo "Options:"
  echo "  -w, --wait: Dont terminate timer but wait and repeat a message"
  echo "              after the time runs out."
  echo "  --message MESSAGE: The message to say when time is up."
  echo "                 default=\"What the fuck, your time is up!\""
  echo "  -s, --seconds: Seconds to alarm. Can be used as alternative"
  echo "                 to passing the seconds as an argument."
  echo "  -m, --minutes: Minutes to alarm."
  echo "  -h, --hours: Hours to alarm."
  echo "  --help: Display this message."
}

seconds=0
minutes=0
hours=0

while test $# -gt 0
do
  case "$1" in
    --help) help_message; exit 0
      ;;
    -w|--wait) wait_on_exit="T"
      ;;
    --message) message=$2; shift
      ;;
    -s|--seconds) seconds=$2; shift
      ;;
    -m|--minutes) minutes=$2; shift
      ;;
    -h|--hours) hours=$2; shift
      ;;
    -*) echo "Bad option $1"; exit 1
      ;;
     *) seconds="$1"
      ;;
  esac
  shift
done

if [ "$seconds" == 0 ] && [ "$minutes" == 0 ] && [ "$hours" == 0 ]; then
  help_message
  exit 1
fi

if [ ! -z $(command -v espeak) ]; then
  speak_cmd="espeak -s 80 -p 0"
elif [ ! -z $(command -v say) ]; then
  speak_cmd="say"
else
  echo "No tts command found"; exit 1
fi

echo "speak command: $speak_cmd"

$speak_cmd "Go"

START_TIME=$(date '+%s')
END_TIME=$(date '+%s' -d "+ $hours hours + $minutes minutes + $seconds seconds")
READABLE_END_TIME=$(date -d "+ $hours hours + $minutes minutes + $seconds seconds")
echo "End time: $READABLE_END_TIME"

while true; do
    sec_remaining=$((END_TIME - $(date '+%s')))
    echo -ne "\r\033[K"$((sec_remaining / (60 * 60)))h $(((sec_remaining / 60) % 60))m $((sec_remaining % 60))s to activation
    [[ "$sec_remaining" -le 0 ]] && break
    sleep 1
done

if [ -z "$message" ]; then
  message="What the fuck, your time is up!"
fi

$speak_cmd "$message"

if [ ! -z "$wait_on_exit" ]; then
  echo -e "\nPlease terminate $(basename $0), pid $$"
  while true; do
    sleep 4
    $speak_cmd "Please terminate $(basename $0), p i d $$"
  done
fi
exit 0
